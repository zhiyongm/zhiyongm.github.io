[{"categories":null,"content":"区块链存储扩展性总结 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:0:0","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"什么是区块链的扩展性？ 区块链的不可能三角: 无法同时达到可扩展（Scalability）、去中心化（Decentralization）、安全（Security） 区块链可扩展性可分为性能可扩展性和功能可扩展性 如果说去中心化+安全性是区块链技术与生俱来的优势，那么可扩展性就是阻碍区块链技术普及和繁荣的阻碍。 ETH：一只猫造成的拥堵 第0层扩容，即通过改变区块链底层数据传输协议提升可扩展性 第1层扩容，即链上（On-Chain）扩容，专注于区块链的共识、网络和数据结构，通过优化、改进公链基本协议提升扩展性。 第2层扩容，不改变公链基本协议，在应用层通过链下（Off-Chain）方式提升可扩展性。 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:1:0","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"Layer 0 通过改变区块链底层数据传输协议提升可扩展性 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:2:0","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"Erlay Erlay是比特币社区的一个提案。 比特币的Gossip协议中，每个节点默认最多125个对等连接，每条信息的txid至少有32个byte，这将消耗大量的带宽。 Erlay 是一个由两部分组成的提案，首先限制节点将直接向其通告交易的对等点数量（默认值：8），其次，使用基于libminisketch的集合协调与其余对等点以避免发送任何交易的 txid接收方已经看到的交易。 Erlay 比当前协议更好地扩展到更多数量的对等点，使得节点可以实际接受比现在更多的连接。这将提高中继网络对意外和故意网络分区的鲁棒性。 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:2:1","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"Kadcast ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:2:2","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"Velocity 利用喷泉码Erase Code在有损信道上提供更细粒度的传输 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:2:3","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"Layer 1 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:3:0","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"Layer 2 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:4:0","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":null,"content":"附：以太坊在扩展性上做的工作 The Merge：共识机制由 POW 转 POS，减少能源消耗，为之后的分片和数据优化打下基础 The Surge：分片，提升 TPS，降低 Gas，提高可扩展性 The Verge：引入 Verkle 树，优化数据存储 The Purge：简化存储，降低验证者硬盘空间性能要求，减少网络拥堵 The Splurge：一系列小升级，以保证以上升级可以平稳运行 ","date":"2023-02-07","objectID":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/:5:0","tags":null,"title":"区块链存储扩展性总结","uri":"/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%98%E5%82%A8%E6%89%A9%E5%B1%95%E6%80%A7%E6%80%BB%E7%BB%93/"},{"categories":["卮言"],"content":" 亚里士多德在《伦理学》里不经意地说过一句话，我视这句话为人生智慧的首要律条，我还是把它译成德语吧：“理性的人寻求的不是快乐，而只是没有痛苦。”这一句话所包含的真理在于：所有的快乐，其本质都是否定的，而痛苦的本质却是肯定的。 对于这一句话的详细解释和论证，人们可以阅读我的《作为意欲和表象的世界》第一卷第五十八章。在这里我用一个日常司空见惯的事实对此真理加以解释。 假如我们整个身体健康无恙，但只有一小处地方受伤或者作痛，那我们身体的整体健康并不会进入我们的意识，我们的注意力始终只集中在那疼痛的伤处。我们生活中的总体舒适感觉就会因这一小处伤痛而烟消云散。 同样，尽管各样事情都按照我们的想法进行和发展，但只要有一件事情违反了我们的意愿——尽管这只是一件微不足道的事情——这一并不如意的事情就会进入我们的头脑；我们就会总惦记着这一件事情，而不会想到其他更重要的、已经如我们所愿发生了的事情。 在这两个例子里面，我们的意欲都受到了伤害。在第一个例子，意欲客体化在人的机体里；在第二个例子，意欲则客体化在人的渴求、愿望当中。在上述两种情况，我们都可看到意欲的满足总是否定的。 意欲获得的满足并不直接被我们感觉得到，它顶多只以反省、回顾的方式进入我们的意识。但是，意欲受到的抑制确实肯定的，因此，这种状况会明确表示出来。每一快感的产生其实就是意欲所受到的抑制得到了消除，意欲获得了解放。 所以，每一种快感都持续相当短暂的时间。 这条规则教育我们不要把目光盯在追求生活的快感和乐趣上面；而是尽可能地注意躲避生活中数不胜数的祸害。 假如这条路子并不正确，那么，伏尔泰所说的话也只能是假的了——他说“快乐只不过是一场梦幻，但痛苦却是真正实在的”。 ——《人生的智慧》叔本华（韦启昌-译）/第115页 接受这个世界是不完美的，回忆起那些快乐的过去，和今天相比又有什么变化（区别）呢？ 正如现在忘记了下面要写什么。 也没事，早晚会想起来的。 ","date":"2023-01-15","objectID":"/posts/%E8%A8%80%E8%AF%AD/%E8%AE%BA%E5%BF%AB%E4%B9%90/:0:0","tags":["卮言"],"title":"啥是快乐","uri":"/posts/%E8%A8%80%E8%AF%AD/%E8%AE%BA%E5%BF%AB%E4%B9%90/"},{"categories":["区块链技术总结"],"content":"TODO。。。 ","date":"2023-01-01","objectID":"/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/:0:0","tags":["分布式算法","区块链"],"title":"分布式一致性算法总结","uri":"/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"},{"categories":["科研的方法论"],"content":"怎么看文献 如何设计实验 具体方法，文献管理+实验设计+工作流 ","date":"2023-01-01","objectID":"/posts/%E7%A7%91%E7%A0%94%E6%96%B9%E6%B3%95%E8%AE%BA/%E7%A7%91%E7%A0%94%E6%96%B9%E6%B3%95%E8%AE%BA/:0:0","tags":null,"title":"科研方法论","uri":"/posts/%E7%A7%91%E7%A0%94%E6%96%B9%E6%B3%95%E8%AE%BA/%E7%A7%91%E7%A0%94%E6%96%B9%E6%B3%95%E8%AE%BA/"},{"categories":["区块链技术总结"],"content":"TODO。。。 ","date":"2023-01-01","objectID":"/posts/blockchain/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/:0:0","tags":["分布式算法","区块链"],"title":"闪电网络总结","uri":"/posts/blockchain/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81/"},{"categories":["区块链技术总结"],"content":"TODO。。。 ","date":"2023-01-01","objectID":"/posts/blockchain/%E9%97%AA%E7%94%B5%E7%BD%91%E7%BB%9C/:0:0","tags":["分布式算法","区块链"],"title":"闪电网络总结","uri":"/posts/blockchain/%E9%97%AA%E7%94%B5%E7%BD%91%E7%BB%9C/"},{"categories":["重言"],"content":"祝大家2023年新年快乐！ ","date":"2022-12-31","objectID":"/posts/%E7%A5%9D2023%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/:0:0","tags":["重言"],"title":"祝：2023新年快乐","uri":"/posts/%E7%A5%9D2023%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"},{"categories":["以太坊技术详解"],"content":"3种树的区别 ","date":"2022-12-30","objectID":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/:0:0","tags":["以太坊","区块链"],"title":"以太坊的3棵树","uri":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/"},{"categories":["以太坊技术详解"],"content":"Merkle树 Merkle Tree，也叫做哈希树，顾名思义，就是存储hash值的一棵树。Merkle树的叶子是数据块的hash值。非叶节点是其对应子节点串联字符串的hash。是一个把任意长度的数据通过哈希函数映射成固定长度数据，这个数据就叫hash值，将这些hash值放到一个List里面，就叫做Hash List。Merkle Tree可以看做Hash List的泛化。 ","date":"2022-12-30","objectID":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/:1:0","tags":["以太坊","区块链"],"title":"以太坊的3棵树","uri":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/"},{"categories":["以太坊技术详解"],"content":"Trie 树 Trie树，又称前缀树或字典树。利用字符串的公共前缀来减少查询时间，最大限度的减少无谓的字符串比较，查询效率比哈希树高。典型应用是用于统计，排序和保存大量的字符串(不仅限于字符串)，经常被搜索引擎系统用于文本词频统计。 ","date":"2022-12-30","objectID":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/:2:0","tags":["以太坊","区块链"],"title":"以太坊的3棵树","uri":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/"},{"categories":["以太坊技术详解"],"content":"Patricia树 Patricia树，或称Patricia trie，压缩前缀树，是一种更节省空间的Trie。对于基数树的每个节点，如果该节点是唯一的儿子的话，就和父节点合并。 ","date":"2022-12-30","objectID":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/:3:0","tags":["以太坊","区块链"],"title":"以太坊的3棵树","uri":"/posts/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84%E5%9B%9B%E6%A3%B5%E6%A0%91/"},{"categories":["以太坊技术详解"],"content":"什么是StateDB 众所周知，以太坊中状态机迁移的核心是：世界状态树（World State Trie）的改变。 ] 而随着以太坊中数据量的不断扩增，其世界树的深度和节点数也在疯狂膨胀，如果我们每次访问账户状态（EOA外部账户 或是 合约账户），都需要对世界状态树进行至少 N=树的深度 的访问，才能获取到账户的状态信息。 因此以太坊引入了一个类似缓存机制的状态DB，维护了一套账户状态到世界状态的映射 以太坊节点在几个不同的地方访问状态： 导入新块时，执行一系列的状态读取和写入。 当检索状态（例如合约调用，web3查询）时，EVM 仅执行读取 当节点正在同步，提供给其他P2P节点所同步。 ] 特别的，对于智能合约来说，其特有的是一个账户存储树， 所有对 State 的修改，并不是直接修改底层数据库。而是暂时记录在内存中，只要在最终需要提交到数据库时，才从尝试 tryUpdate。 如果未改动，则从树中读取数据。 为了避免重复从树中读取，提高效率。所有获取过的数据，将会缓存在 map[common.Address*stateObject 中。 正是由于有了StateDB的存在，在我们读取数据的过程中，实际上存在着三个步骤： 尝试从内存的StateDB中取到已经缓存的数据 尝试从snapshots快照机制中获取 一个快照就是给定一个区块处的以太坊状态的完整视图。抽象掉实现方面的细节，它就是把所有账户和合约存储槽堆放在一起，都由扁平的键值对来表示。 每当我们想要访问某个账户或者某个存储槽的时候，我们只需付出一次 LevelDB 的查询操作即可，而不用在每棵树上查询 7～8 次。理论上来说，更新快照也很简单，处理完一个区块后，我们只需为每个要更新的存储槽多做 1 次额外的 LevelDB 写入操作即可。 当初始同步完成之后，参与主网的节点需要 9～10 小时来建构初始快照（此后再维持其可用性），还需要额外的 15 GB 以上的硬盘。 ] 如果上面的都找不到，则从Trie树中依次去寻找。 大约2019年，Trie树的深度已经饱和了7。 这意味着，每个trie操作（例如读取余额，写入nonce）至少接触7-8个内部节点 因此将执行至少7-8个持久数据库访问。 LevelDB还将其数据组织为最多7个级别，]最终结果是单次访问将放大为25-50 随机磁盘访问。 ","date":"2022-12-30","objectID":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3geth%E4%B8%8Eethereum%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/:0:0","tags":["以太坊","区块链"],"title":"深入理解Geth与Ethereum的存储结构","uri":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3geth%E4%B8%8Eethereum%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"},{"categories":["以太坊技术详解"],"content":"StateDB的生命周期 stateDB是用来管理世界状态的，准确的说是用来改变世界状态的。那么世界状态什么时候会改变呢？ 1、打包交易进行挖矿的时候； 2、收到区块广播执行同步的时候； 也就是说，stateDB是从挖矿时从交易池取出交易并执行，然后打包等待挖矿，最后当区块挖矿成功后，将stateDB中的账户改变刷入数据库后，stateDB的使命就结束了，就可以从内存中删除。 ] 总结： 以太坊的StateDB设计仅仅在同一个区块内实现了对世界状态的缓存。 StateDB的存在仅仅只能让第2次及其之后的账户数据得到快速查询，第一次还是很慢！ 以太坊出块时间在12 到14 秒之间，那么构建出的StateDB仅仅只能维护12-14秒的世界状态，一旦产生下一个区块，StateDB就会立刻清空。 因此不难看出，**StateDB仍然未能解决IO性能带来的瓶颈，**只是旨在对区块内的数据进行高速缓存之工作 快照机制 解决了对 账户和存储槽 的缓存，只需进行1次LevelDB的访问+128个块的difference树的访问 牺牲：快照需要大约的额外磁盘开销主网中 20-25GB的空间 根据节点的负载，快照的构建需一周左右的时间 ","date":"2022-12-30","objectID":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3geth%E4%B8%8Eethereum%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/:1:0","tags":["以太坊","区块链"],"title":"深入理解Geth与Ethereum的存储结构","uri":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3geth%E4%B8%8Eethereum%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"},{"categories":["以太坊技术详解"],"content":"什么是StateDB 众所周知，以太坊中状态机迁移的核心是：世界状态树（World State Trie）的改变。 而随着以太坊中数据量的不断扩增，其世界树的深度和节点数也在疯狂膨胀，如果我们每次访问账户状态（EOA外部账户 或是 合约账户），都需要对世界状态树进行至少 N=树的深度 的访问，才能获取到账户的状态信息。 因此以太坊引入了一个类似缓存机制的状态DB，维护了一套账户状态到世界状态的映射 以太坊节点在几个不同的地方访问状态： 导入新块时，执行一系列的状态读取和写入。 当检索状态（例如合约调用，web3查询）时，EVM 仅执行读取 当节点正在同步，提供给其他P2P节点所同步。 ![img](./深入理解StateDB和快照机制.assets/Untitled 1.png) 特别的，对于智能合约来说，其特有的是一个账户存储树， 所有对 State 的修改，并不是直接修改底层数据库。而是暂时记录在内存中，只要在最终需要提交到数据库时，才从尝试 tryUpdate。 如果未改动，则从树中读取数据。 为了避免重复从树中读取，提高效率。所有获取过的数据，将会缓存在 map[common.Address*stateObject 中。 正是由于有了StateDB的存在，在我们读取数据的过程中，实际上存在着三个步骤： 尝试从内存的StateDB中取到已经缓存的数据 尝试从snapshots快照机制中获取 一个快照就是给定一个区块处的以太坊状态的完整视图。抽象掉实现方面的细节，它就是把所有账户和合约存储槽堆放在一起，都由扁平的键值对来表示。 每当我们想要访问某个账户或者某个存储槽的时候，我们只需付出一次 LevelDB 的查询操作即可，而不用在每棵树上查询 7～8 次。理论上来说，更新快照也很简单，处理完一个区块后，我们只需为每个要更新的存储槽多做 1 次额外的 LevelDB 写入操作即可。 当初始同步完成之后，参与主网的节点需要 9～10 小时来建构初始快照（此后再维持其可用性），还需要额外的 15 GB 以上的硬盘。 ![img](./深入理解StateDB和快照机制.assets/Untitled 2-1672397037524-11.png) 如果上面的都找不到，则从Trie树中依次去寻找。 大约2019年，Trie树的深度已经饱和了7。 这意味着，每个trie操作（例如读取余额，写入nonce）至少接触7-8个内部节点 因此将执行至少7-8个持久数据库访问。 LevelDB还将其数据组织为最多7个级别，]最终结果是单次访问将放大为25-50 随机磁盘访问。 ","date":"2022-12-30","objectID":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3statedb%E5%92%8C%E5%BF%AB%E7%85%A7%E6%9C%BA%E5%88%B6/:0:0","tags":["以太坊","区块链"],"title":"深入理解StateDB和快照机制","uri":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3statedb%E5%92%8C%E5%BF%AB%E7%85%A7%E6%9C%BA%E5%88%B6/"},{"categories":["以太坊技术详解"],"content":"StateDB的生命周期 stateDB是用来管理世界状态的，准确的说是用来改变世界状态的。那么世界状态什么时候会改变呢？ 1、打包交易进行挖矿的时候； 2、收到区块广播执行同步的时候； 也就是说，stateDB是从挖矿时从交易池取出交易并执行，然后打包等待挖矿，最后当区块挖矿成功后，将stateDB中的账户改变刷入数据库后，stateDB的使命就结束了，就可以从内存中删除。 ![img](./深入理解StateDB和快照机制.assets/Untitled 3.png) 总结： 以太坊的StateDB设计仅仅在同一个区块内实现了对世界状态的缓存。 StateDB的存在仅仅只能让第2次及其之后的账户数据得到快速查询，第一次还是很慢！ 以太坊出块时间在12 到14 秒之间，那么构建出的StateDB仅仅只能维护12-14秒的世界状态，一旦产生下一个区块，StateDB就会立刻清空。 因此不难看出，**StateDB仍然未能解决IO性能带来的瓶颈，**只是旨在对区块内的数据进行高速缓存之工作 快照机制 解决了对 账户和存储槽 的缓存，只需进行1次LevelDB的访问+128个块的difference树的访问 牺牲：快照需要大约的额外磁盘开销主网中 20-25GB的空间 根据节点的负载，快照的构建需一周左右的时间 ","date":"2022-12-30","objectID":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3statedb%E5%92%8C%E5%BF%AB%E7%85%A7%E6%9C%BA%E5%88%B6/:1:0","tags":["以太坊","区块链"],"title":"深入理解StateDB和快照机制","uri":"/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3statedb%E5%92%8C%E5%BF%AB%E7%85%A7%E6%9C%BA%E5%88%B6/"},{"categories":["卮言"],"content":" 是故，形而上者谓之道； 形而下者谓之器； 君子不器。 正所谓： 不器于角色。 不器于器物。 ","date":"2022-12-30","objectID":"/posts/%E8%A8%80%E8%AF%AD/%E5%90%9B%E5%AD%90%E4%B8%8D%E5%99%A8/:0:0","tags":["卮言"],"title":"君子不器","uri":"/posts/%E8%A8%80%E8%AF%AD/%E5%90%9B%E5%AD%90%E4%B8%8D%E5%99%A8/"},{"categories":null,"content":"马志宇 Ma Zhiyu 硕士在读 中国科学技术大学 计算机应用技术 Email：zyma@mail.ustc.edu.cn 研究方向：区块链技术，CV深度学习，Web开发，生物信息学 教育与工作经历 2021.9-至今 中国科学技术大学 计算机应用技术 硕士研究生在读 论文成果 ","date":"2022-12-30","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"CSCD核心论文-第一作者：基于改进DRF算法的农业微服务负载均衡 ","date":"2022-12-30","objectID":"/about/:0:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"二区SCI论文-共同作者：TeaAS: a comprehensive database for alternative splicing in tea plants ","date":"2022-12-30","objectID":"/about/:0:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"二区SCI论文-共同作者：Potential of smartphone-coupled micro NIR spectroscopy for quality control green tea ","date":"2022-12-30","objectID":"/about/:0:3","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"三区SCI论文-共同作者：IdentPMP: identification of moonlighting proteins in plants sequence-based models ","date":"2022-12-30","objectID":"/about/:0:4","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"EI会议论文-共同作者：Identification of Rice Drought-Resistant Gene Based on Gene and Network Algorithm 参与项目 开源项目和作品 ","date":"2022-12-30","objectID":"/about/:0:5","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"开源项目 DeepLearning-Emotion-Classifier-withGUI ：边缘计算环境下基于知识蒸馏的人脸实时表情识别项目，在ARM树莓派平台使用模型压缩技术从而也可流畅运行，表情识别部分采用TensorFlow+OpenCV实现，GUI使用pyqt5构建。 ","date":"2022-12-30","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"技术文章 待整理。。。 技能清单 以下均为我熟练使用的技能 基础知识：计算机组成原理（计算机系统）[中国科大2021秋季学期成绩A]、熟悉常见计算机网络协议 编程语言：熟练使用Java、Python、Golang语言 容器技术：Docker、k8s 区块链领域常用理论和技术[Ethereum、Solidity智能合约、共识算法、分布式理论、密码学基本原理…] 操作系统：Linux运维和常见发行版的基本操作[Debian系、Redhat系] 后端框架：SpringBoot、Mybatis、MQTT、Flask、Elasticsearch、Kafka 前端框架：Bootstrap、Vue、EasyUI、LayUI 数据库相关：MySQL、SQLite、Redis 版本控制工具：Svn、Git、Github 深度学习和机器学习：Tensorflow、Pytorch、OpenCV、Sklearn、Numpy… 硬件技术：Raspberry Pi物联网设备开发、PLC运维调试、Arduino开发、常用传感器数据对接 ","date":"2022-12-30","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"}]